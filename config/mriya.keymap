/*
 * Copyright (c) 2023 Andrei Gaevskii
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define DEF 0
#define LWR 1
#define RSE 2
#define ADJ 3

&lt { quick_tap_ms = <200>; };

&mt { quick_tap_ms = <200>; };

&sk { quick-release; };

/ {
    macros {
        mac: mac {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 3 &mac_to_ru>;
            label = "MAC";
        };

        win: win {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 4 &win_to_ru>;
            label = "WIN";
        };

        m_dash: m_dash {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_ALT>,
                <&macro_tap>,
                <&kp KP_NUMBER_0 &kp KP_NUMBER_1 &kp KP_NUMBER_5 &kp KP_NUMBER_1>,
                <&macro_release>,
                <&kp LEFT_ALT>;

            label = "M_DASH";
            wait-ms = <2>;
            tap-ms = <5>;
        };

        win_to_en: win_to_en {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_ALT &kp LEFT_SHIFT>,
                <&macro_tap>,
                <&kp N1>,
                <&macro_release>,
                <&kp LEFT_ALT &kp LEFT_SHIFT>,
                <&macro_press>,
                <&to 1>;

            label = "WIN_TO_EN";
            wait-ms = <5>;
            tap-ms = <5>;
        };

        win_to_ru: win_to_ru {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_ALT &kp LEFT_SHIFT>,
                <&macro_tap>,
                <&kp N2>,
                <&macro_release>,
                <&kp LEFT_ALT &kp LEFT_SHIFT>,
                <&macro_press>,
                <&to 0>;

            label = "WIN_TO_RU";
            wait-ms = <5>;
            tap-ms = <5>;
        };

        mg_dot: mg_dot {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RA(N7) &kp SPACE &sk LEFT_SHIFT>;
            label = "MG_DOT";
            wait-ms = <2>;
            tap-ms = <5>;
        };

        win_dot: win_dot {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_ALT>,
                <&macro_tap>,
                <&kp KP_NUMBER_4 &kp KP_NUMBER_6>,
                <&macro_release>,
                <&kp LEFT_ALT>;

            label = "WIN_DOT";
            wait-ms = <2>;
            tap-ms = <5>;
        };

        win_colon: win_colon {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_ALT>,
                <&macro_tap>,
                <&kp KP_NUMBER_5 &kp KP_NUMBER_8>,
                <&macro_release>,
                <&kp LEFT_ALT>;

            label = "WIN_COLON";
            wait-ms = <2>;
            tap-ms = <5>;
        };

        win_comma: win_comma {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_ALT>,
                <&macro_tap>,
                <&kp KP_NUMBER_4 &kp KP_NUMBER_4>,
                <&macro_release>,
                <&kp LEFT_ALT>;

            label = "WIN_COMMA";
            wait-ms = <2>;
            tap-ms = <5>;
        };

        mg_comma: mg_comma {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RA(NUMBER_6) &kp SPACE>;
            label = "MG_COMMA";
            wait-ms = <2>;
            tap-ms = <5>;
        };

        win_smcln: win_smcln {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_ALT>,
                <&macro_tap>,
                <&kp KP_NUMBER_5 &kp KP_NUMBER_9>,
                <&macro_release>,
                <&kp LEFT_ALT>;

            label = "WIN_SMCLN";
            wait-ms = <2>;
            tap-ms = <5>;
        };

        win_no: win_no {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_ALT>,
                <&macro_tap>,
                <&kp KP_NUMBER_2 &kp KP_NUMBER_5 &kp KP_NUMBER_2>,
                <&macro_release>,
                <&kp LEFT_ALT>;

            label = "WIN_NO";
            wait-ms = <2>;
            tap-ms = <5>;
        };

        win_tilde: win_tilde {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_ALT>,
                <&macro_tap>,
                <&kp KP_NUMBER_1 &kp KP_NUMBER_2 &kp KP_NUMBER_6>,
                <&macro_release>,
                <&kp LEFT_ALT>;

            label = "WIN_TILDE";
            wait-ms = <2>;
            tap-ms = <5>;
        };

        win_grave: win_grave {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_ALT>,
                <&macro_tap>,
                <&kp KP_NUMBER_9 &kp KP_NUMBER_6>,
                <&macro_release>,
                <&kp LEFT_ALT>;

            label = "WIN_GRAVE";
            wait-ms = <2>;
            tap-ms = <5>;
        };

        win_question: win_question {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_ALT>,
                <&macro_tap>,
                <&kp KP_NUMBER_6 &kp KP_NUMBER_3>,
                <&macro_release>,
                <&kp LEFT_ALT>;

            label = "WIN_QUESTION";
            wait-ms = <2>;
            tap-ms = <5>;
        };

        md_task: md_task {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp MINUS &kp SPACE &kp RA(LEFT_BRACKET) &kp SPACE &kp RA(RIGHT_BRACKET) &kp SPACE>;
            label = "MD_TASK";
            wait-ms = <2>;
            tap-ms = <5>;
        };

        u_dot: u_dot {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp N0 &kp N0 &kp N2 &kp E>;
            label = "U_DOT";
            wait-ms = <2>;
            tap-ms = <5>;
        };

        u_comma: u_comma {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp N0 &kp N0 &kp N2 &kp C>;
            label = "U_COMMA";
            wait-ms = <2>;
            tap-ms = <5>;
        };

        win_compose: win_compose {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp RIGHT_ALT &kp U>;
            label = "WIN_COMPOSE";
            wait-ms = <2>;
            tap-ms = <5>;
        };

        mac_to_en: mac_to_en {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_ALT &kp LEFT_SHIFT &kp LEFT_CONTROL>,
                <&macro_tap>,
                <&kp N1>,
                <&macro_release>,
                <&kp LEFT_ALT &kp LEFT_SHIFT &kp LEFT_CONTROL>,
                <&macro_press>,
                <&to 5>;

            label = "MAC_TO_EN";
            wait-ms = <5>;
            tap-ms = <5>;
        };

        mac_to_ru: mac_to_ru {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_ALT &kp LEFT_SHIFT &kp LEFT_CONTROL>,
                <&macro_tap>,
                <&kp NUMBER_2>,
                <&macro_release>,
                <&kp LEFT_ALT &kp LEFT_SHIFT &kp LEFT_CONTROL>,
                <&macro_press>,
                <&to 4>;

            label = "MAC_TO_RU";
            wait-ms = <5>;
            tap-ms = <5>;
        };
    };

    behaviors {
        lang_win: lang_win {
            compatible = "zmk,behavior-mod-morph";
            label = "LANG_WIN";
            bindings = <&win_to_ru>, <&win_to_en>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
            keep-mods = <(MOD_LSFT)>;
        };

        Left_HRM: Left_HRM {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFT_HRM";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <220>;
            flavor = "balanced";
            hold-trigger-key-positions = <34 35 21 22 47 46 33 19 32 44 45 20 7 6 8 9 36 24 23 10 48 49 37>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <100>;
        };

        Right_HRM: Right_HRM {
            compatible = "zmk,behavior-hold-tap";
            label = "RIGHT_HRM";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <220>;
            flavor = "balanced";
            quick-tap-ms = <175>;
            require-prior-idle-ms = <100>;
            hold-trigger-key-positions = <1 2 3 4 5 14 15 16 17 18 27 28 29 30 31 39 40 41 42 43 13>;
        };

        quest_excl: quest_excl {
            compatible = "zmk,behavior-mod-morph";
            label = "QUEST_EXCL";
            bindings = <&kp RA(LS(SLASH))>, <&kp EXCLAMATION>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
            keep-mods = <(MOD_LSFT)>;
        };
    };

    combos { compatible = "zmk,combos"; };

    keymap {
        compatible = "zmk,keymap";

        win_base_ru {
            bindings = <
            &kp ESC       &kp NUMBER_6  &kp NUMBER_7  &kp N8     &kp N9                &kp NUMBER_0     &kp NUMBER_1   &kp NUMBER_2    &kp NUMBER_3  &kp NUMBER_4  &kp N5       &kp RA(H)
&win_to_en  &kp GRAVE     &kp Q         &kp W         &kp E      &kp R                 &kp T            &kp Y          &kp U           &kp I         &kp O         &kp P        &kp LBKT                 &kp RBKT
            &kp LALT      &kp A         &kp S         &kp D      &Left_HRM 8 F         &kp G            &kp H          &Right_HRM 9 J  &kp K         &kp L         &kp SEMI     &mt RALT SQT
            &kp LEFT_WIN  &kp Z         &kp X         &kp C      &kp V                 &kp B            &kp N          &kp M           &kp COMMA     &kp DOT       &quest_excl  &mt RIGHT_WIN RA(SLASH)
                                        &mo 2         &lt 3 TAB  &mt LEFT_SHIFT SPACE  &mt LCTRL RET    &mt RCTRL ESC  &mt RSHFT BSPC  &lt 3 DEL     &mo 2
            >;
        };

        win_en {
            bindings = <
            &trans         &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans          &trans           &trans   &kp DOLLAR
&win_to_ru  &kp BACKSLASH  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans          &trans           &trans   &kp UNDERSCORE               &kp AMPERSAND
            &trans         &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans          &trans           &kp SQT  &mt RIGHT_ALT DOUBLE_QUOTES
            &trans         &trans  &trans  &trans  &trans  &trans    &trans  &trans  &kp LEFT_BRACE  &kp RIGHT_BRACE  &trans   &trans
                                   &trans  &trans  &trans  &trans    &trans  &trans  &trans          &trans
            >;
        };

        win_lower {
            bindings = <
        &mo 10    &trans  &trans         &trans     &trans  &trans           &trans  &trans  &trans  &trans  &trans   &mo 10
&trans  &trans    &trans  &trans         &trans     &trans  &kp LC(LS(T))    &trans  &trans  &trans  &trans  &trans   &trans    &kp F12
        &kp LALT  &trans  &kp LC(LS(Z))  &kp LC(Z)  &trans  &trans           &trans  &trans  &trans  &trans  &trans   &kp RALT
        &kp LWIN  &kp F1  &kp F2         &kp F3     &kp F4  &kp F5           &kp F6  &kp F7  &kp F8  &kp F9  &kp F10  &kp F11
                          &trans         &trans     &trans  &trans           &trans  &trans  &trans  &trans
            >;
        };

        win_raise {
            bindings = <
        &mo 10     &trans  &trans            &trans        &trans             &trans                  &trans        &trans       &kp LS(LC(NUMBER_1))  &trans     &trans           &mo 10
&trans  &kp GRAVE  &none   &kp LEFT_BRACKET  &kp UP_ARROW  &kp RIGHT_BRACKET  &kp NON_US_BACKSLASH    &kp C_VOL_UP  &kp HOME     &kp UP                &kp END    &kp SLCK         &kp CAPS         &kp C_SLEEP
        &kp LALT   &trans  &kp LEFT          &kp DOWN      &kp RIGHT          &kp SEMICOLON           &kp C_MUTE    &kp LEFT     &kp DOWN              &kp RIGHT  &kp K_APP        &mt RALT INSERT
        &trans     &none   &none             &kp COMMA     &kp PERIOD         &kp SLASH               &kp C_VOL_DN  &kp PAGE_UP  &none                 &kp PG_DN  &kp PAUSE_BREAK  &trans
                           &trans            &trans        &trans             &trans                  &trans        &trans       &trans                &trans
            >;
        };

        mac_base_ru {
            bindings = <
            &kp ESC    &kp NUMBER_6  &kp N7  &kp N8     &kp N9                &kp N0               &kp NUMBER_1        &kp NUMBER_2    &kp NUMBER_3  &kp NUMBER_4  &kp N5       &kp RA(H)
&mac_to_en  &kp GRAVE  &kp Q         &kp W   &kp E      &kp R                 &kp T                &kp Y               &kp U           &kp I         &kp O         &kp P        &kp LBKT                     &kp RBKT
            &kp LALT   &kp A         &kp S   &kp D      &Left_HRM 8 F         &kp G                &kp H               &Right_HRM 9 J  &kp K         &kp L         &kp SEMI     &mt RALT SQT
            &kp LCTRL  &kp Z         &kp X   &kp C      &kp V                 &kp B                &kp N               &kp M           &kp COMMA     &kp DOT       &quest_excl  &mt RIGHT_CONTROL RA(SLASH)
                                     &mo 6   &lt 7 TAB  &mt LEFT_SHIFT SPACE  &mt LEFT_META RET    &mt RIGHT_META ESC  &mt RSHFT BSPC  &lt 7 DEL     &mo 6
            >;
        };

        mac_en {
            bindings = <
            &kp ESC        &kp NUMBER_6  &kp N7  &kp N8     &kp N9                &kp N0               &kp NUMBER_1        &kp NUMBER_2    &kp NUMBER_3    &kp NUMBER_4     &kp N5       &kp DOLLAR
&mac_to_ru  &kp BACKSLASH  &kp Q         &kp W   &kp E      &kp R                 &kp T                &kp Y               &kp U           &kp I           &kp O            &kp P        &kp UNDERSCORE               &kp AMPERSAND
            &kp LALT       &kp A         &kp S   &kp D      &Left_HRM 8 F         &kp G                &kp H               &Right_HRM 9 J  &kp K           &kp L            &kp SQT      &mt RALT DOUBLE_QUOTES
            &kp LCTRL      &kp Z         &kp X   &kp C      &kp V                 &kp B                &kp N               &kp M           &kp LEFT_BRACE  &kp RIGHT_BRACE  &quest_excl  &mt RIGHT_CONTROL RA(SLASH)
                                         &mo 6   &lt 7 TAB  &mt LEFT_SHIFT SPACE  &mt LEFT_META RET    &mt RIGHT_META ESC  &mt RSHFT BSPC  &lt 7 DEL       &mo 6
            >;
        };

        mac_lower {
            bindings = <
        &mo 10     &trans  &trans         &trans     &trans  &trans           &trans  &trans  &trans  &trans  &trans   &mo 10
&trans  &trans     &trans  &trans         &trans     &trans  &kp LS(LG(T))    &trans  &trans  &trans  &trans  &trans   &trans    &kp F12
        &kp LALT   &trans  &kp LS(LG(Z))  &kp LG(Z)  &trans  &trans           &trans  &trans  &trans  &trans  &trans   &kp RALT
        &kp LCTRL  &kp F1  &kp F2         &kp F3     &kp F4  &kp F5           &kp F6  &kp F7  &kp F8  &kp F9  &kp F10  &kp F11
                           &trans         &trans     &trans  &trans           &trans  &trans  &trans  &trans
            >;
        };

        mac_raise {
            bindings = <
        &mo 10     &none   &trans            &trans        &trans             &trans           &none         &none        &kp LS(LG(NUMBER_1))  &none      &none            &mo 10
&trans  &kp GRAVE  &none   &kp LEFT_BRACKET  &kp UP_ARROW  &kp RIGHT_BRACKET  &kp BACKSLASH    &kp C_VOL_UP  &kp HOME     &kp UP                &kp END    &kp SLCK         &kp CAPS         &kp C_SLEEP
        &kp LALT   &trans  &kp LEFT          &kp DOWN      &kp RIGHT          &kp SEMICOLON    &kp C_MUTE    &kp LEFT     &kp DOWN              &kp RIGHT  &kp K_APP        &mt RALT INSERT
        &trans     &none   &none             &kp COMMA     &kp PERIOD         &kp SLASH        &kp C_VOL_DN  &kp PAGE_UP  &none                 &kp PG_DN  &kp PAUSE_BREAK  &trans
                           &trans            &trans        &trans             &trans           &trans        &trans       &trans                &trans
            >;
        };

        symbol_right {
            bindings = <
        &trans  &trans  &trans  &trans  &trans  &trans    &kp RA(B)          &kp RA(LS(M))  &kp LS(RA(NUMBER_6))  &kp LS(RA(NUMBER_7))   &kp RA(Q)        &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans    &kp RA(I)          &mg_dot        &kp RA(N9)            &kp RA(N0)             &kp RA(D)        &kp UNDERSCORE  &trans
        &trans  &trans  &trans  &trans  &trans  &trans    &kp RA(SEMICOLON)  &kp RA(N7)     &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp ASTERISK     &kp RA(V)
        &trans  &trans  &trans  &trans  &trans  &trans    &kp RA(K)          &md_task       &kp RA(LEFT_BRACKET)  &kp RA(RIGHT_BRACKET)  &kp EXCLAMATION  &kp PIPE
                        &trans  &trans  &trans  &trans    &trans             &trans         &trans                &trans
            >;
        };

        symbol_left {
            bindings = <
        &trans         &kp RA(EQUAL)      &kp RA(J)          &kp RA(L)      &kp RA(N)          &kp PERCENT              &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp BACKSLASH  &kp RA(A)          &kp AT_SIGN        &kp HASH       &mg_comma          &kp RA(F)                &trans  &trans  &trans  &trans  &trans  &trans  &trans
        &trans         &kp PLUS           &kp EQUAL          &kp MINUS      &kp RA(NUMBER_6)   &kp RA(LS(SEMICOLON))    &trans  &trans  &trans  &trans  &trans  &trans
        &trans         &kp LS(RA(EQUAL))  &kp RA(LS(MINUS))  &kp RA(MINUS)  &kp RA(LC(GRAVE))  &kp RA(LS(LC(GRAVE)))    &trans  &trans  &trans  &trans  &trans  &trans
                                          &trans             &trans         &trans             &trans                   &trans  &trans  &trans  &trans
            >;
        };

        switch {
            bindings = <
       &trans      &none         &none         &sys_reset    &none         &bootloader     &bootloader   &none         &sys_reset    &none         &none         &trans
&none  &none       &none         &none         &none         &none         &none           &none         &none         &none         &none         &none         &none       &none
       &bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &bt BT_SEL 4  &bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0  &bt BT_CLR
       &none       &none         &none         &none         &mac          &win            &win          &mac          &none         &none         &none         &none
                                 &trans        &trans        &none         &none           &none         &none         &trans        &none
            >;
        };
    };
};
