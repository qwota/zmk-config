/*
 * Copyright (c) 2023 Andrei Gaevskii
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define DEF 0
#define LWR 1
#define RSE 2
#define ADJ 3

&lt { quick_tap_ms = <200>; };

&mt { quick_tap_ms = <200>; };

&sk { quick-release; };

/ {
    macros {
        mac: mac {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 3 &to 6>;
            label = "MAC";
        };

        win: win {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&bt BT_SEL 4 &win_to_ru>;
            label = "WIN";
        };

        m_dash: m_dash {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_ALT>,
                <&macro_tap>,
                <&kp KP_NUMBER_0 &kp KP_NUMBER_1 &kp KP_NUMBER_5 &kp KP_NUMBER_1>,
                <&macro_release>,
                <&kp LEFT_ALT>;

            label = "M_DASH";
            wait-ms = <2>;
            tap-ms = <5>;
        };

        win_to_en: win_to_en {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_ALT &kp LEFT_SHIFT>,
                <&macro_tap>,
                <&kp N1>,
                <&macro_release>,
                <&kp LEFT_ALT &kp LEFT_SHIFT>,
                <&macro_press>,
                <&to 1>;

            label = "WIN_TO_EN";
            wait-ms = <5>;
            tap-ms = <10>;
        };

        win_to_ru: win_to_ru {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_ALT &kp LEFT_SHIFT>,
                <&macro_tap>,
                <&kp N2>,
                <&macro_release>,
                <&kp LEFT_ALT &kp LEFT_SHIFT>,
                <&macro_press>,
                <&to 0>;

            label = "WIN_TO_RU";
            wait-ms = <5>;
            tap-ms = <10>;
        };

        mg_dot: mg_dot {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&win_dot &kp SPACE &sk LEFT_SHIFT>;
            label = "MG_DOT";
            wait-ms = <2>;
            tap-ms = <5>;
        };

        win_dot: win_dot {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_ALT>,
                <&macro_tap>,
                <&kp KP_NUMBER_4 &kp KP_NUMBER_6>,
                <&macro_release>,
                <&kp LEFT_ALT>;

            label = "WIN_DOT";
            wait-ms = <2>;
            tap-ms = <5>;
        };

        win_colon: win_colon {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_ALT>,
                <&macro_tap>,
                <&kp KP_NUMBER_5 &kp KP_NUMBER_8>,
                <&macro_release>,
                <&kp LEFT_ALT>;

            label = "WIN_COLON";
            wait-ms = <2>;
            tap-ms = <5>;
        };

        win_comma: win_comma {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_ALT>,
                <&macro_tap>,
                <&kp KP_NUMBER_4 &kp KP_NUMBER_4>,
                <&macro_release>,
                <&kp LEFT_ALT>;

            label = "WIN_COMMA";
            wait-ms = <2>;
            tap-ms = <5>;
        };

        mg_comma: mg_comma {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&win_comma &kp SPACE>;
            label = "MG_COMMA";
            wait-ms = <2>;
            tap-ms = <5>;
        };

        win_smcln: win_smcln {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_ALT>,
                <&macro_tap>,
                <&kp KP_NUMBER_5 &kp KP_NUMBER_9>,
                <&macro_release>,
                <&kp LEFT_ALT>;

            label = "WIN_SMCLN";
            wait-ms = <2>;
            tap-ms = <5>;
        };

        win_no: win_no {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_ALT>,
                <&macro_tap>,
                <&kp KP_NUMBER_2 &kp KP_NUMBER_5 &kp KP_NUMBER_2>,
                <&macro_release>,
                <&kp LEFT_ALT>;

            label = "WIN_NO";
            wait-ms = <2>;
            tap-ms = <5>;
        };

        win_tilde: win_tilde {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_ALT>,
                <&macro_tap>,
                <&kp KP_NUMBER_1 &kp KP_NUMBER_2 &kp KP_NUMBER_6>,
                <&macro_release>,
                <&kp LEFT_ALT>;

            label = "WIN_TILDE";
            wait-ms = <2>;
            tap-ms = <5>;
        };

        win_grave: win_grave {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_ALT>,
                <&macro_tap>,
                <&kp KP_NUMBER_9 &kp KP_NUMBER_6>,
                <&macro_release>,
                <&kp LEFT_ALT>;

            label = "WIN_GRAVE";
            wait-ms = <2>;
            tap-ms = <5>;
        };

        win_question: win_question {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&macro_press>,
                <&kp LEFT_ALT>,
                <&macro_tap>,
                <&kp KP_NUMBER_6 &kp KP_NUMBER_3>,
                <&macro_release>,
                <&kp LEFT_ALT>;

            label = "WIN_QUESTION";
            wait-ms = <2>;
            tap-ms = <5>;
        };
    };

    behaviors {
        lang_win: lang_win {
            compatible = "zmk,behavior-mod-morph";
            label = "LANG_WIN";
            bindings = <&win_to_ru>, <&win_to_en>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
            keep-mods = <(MOD_LSFT)>;
        };

        Left_HRM: Left_HRM {
            compatible = "zmk,behavior-hold-tap";
            label = "LEFT_HRM";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <220>;
            flavor = "balanced";
            hold-trigger-key-positions = <34 35 21 22 47 46 33 19 32 44 45 20 7 6 8 9 36 24 23 10 48 49>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
        };

        Right_HRM: Right_HRM {
            compatible = "zmk,behavior-hold-tap";
            label = "RIGHT_HRM";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <220>;
            flavor = "balanced";
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            hold-trigger-key-positions = <1 2 3 4 5 14 15 16 17 18 27 28 29 30 31 39 40 41 42 43 13>;
        };
    };

    combos { compatible = "zmk,combos"; };

    keymap {
        compatible = "zmk,keymap";

        win_base_ru {
            bindings = <
           &kp ESC       &kp N1  &kp N2  &kp N3     &kp N4                &kp N5           &kp N6         &kp N7          &kp N8     &kp N9   &kp N0         &kp RA(H)
&lang_win  &kp GRAVE     &kp Q   &kp W   &kp E      &kp R                 &kp T            &kp Y          &kp U           &kp I      &kp O    &kp P          &kp LBKT       &kp RBKT
           &kp LALT      &kp A   &kp S   &kp D      &Left_HRM 2 F         &kp G            &kp H          &Right_HRM 3 J  &kp K      &kp L    &kp SEMI       &mt RALT SQT
           &kp LEFT_WIN  &kp Z   &kp X   &kp C      &kp V                 &kp B            &kp N          &kp M           &kp COMMA  &kp DOT  &win_question  &kp KP_DIVIDE
                                 &mo 4   &lt 5 TAB  &mt LEFT_SHIFT SPACE  &mt LCTRL RET    &mt RCTRL ESC  &mt RSHFT BSPC  &lt 5 DEL  &mo 4
            >;
        };

        win_en {
            bindings = <
        &trans         &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans          &trans           &trans   &kp DOLLAR
&trans  &kp BACKSLASH  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans          &trans           &trans   &kp UNDERSCORE     &kp AMPERSAND
        &trans         &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans          &trans           &kp SQT  &kp DOUBLE_QUOTES
        &trans         &trans  &trans  &trans  &trans  &trans    &trans  &trans  &kp LEFT_BRACE  &kp RIGHT_BRACE  &trans   &trans
                               &trans  &trans  &trans  &trans    &trans  &trans  &trans          &trans
            >;
        };

        win_symbol_right {
            bindings = <
        &trans  &trans  &trans  &trans  &trans  &trans    &kp LS(RA(M))     &kp RA(LS(X))  &kp LS(RA(LESS_THAN))  &kp LS(RA(GREATER_THAN))  &kp LS(RA(D))    &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans    &kp RA(NUMBER_6)  &mg_dot        &kp RA(COMMA)          &kp RA(PERIOD)            &kp RA(D)        &kp UNDERSCORE  &trans
        &trans  &trans  &trans  &trans  &trans  &trans    &win_colon        &win_dot       &kp LEFT_PARENTHESIS   &kp RIGHT_PARENTHESIS     &kp ASTERISK     &trans
        &trans  &trans  &trans  &trans  &trans  &trans    &kp RA(V)         &kp RA(W)      &kp RA(LEFT_BRACKET)   &kp RA(RIGHT_BRACKET)     &kp EXCLAMATION  &kp PIPE
                        &trans  &trans  &trans  &trans    &trans            &trans         &trans                 &trans
            >;
        };

        win_symbol_left {
            bindings = <
        &trans         &kp RA(EQUAL)      &kp RA(N9)         &kp RA(N0)        &win_no     &kp PERCENT    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp BACKSLASH  &kp RA(A)          &kp RA(NUMBER_2)   &kp RA(NUMBER_3)  &mg_comma   &kp RA(G)      &trans  &trans  &trans  &trans  &trans  &trans  &trans
        &trans         &kp PLUS           &kp EQUAL          &kp MINUS         &win_comma  &win_smcln     &trans  &trans  &trans  &trans  &trans  &trans
        &trans         &kp LS(RA(EQUAL))  &kp RA(LS(MINUS))  &m_dash           &win_grave  &win_tilde     &trans  &trans  &trans  &trans  &trans  &trans
                                          &trans             &trans            &trans      &trans         &trans  &trans  &trans  &trans
            >;
        };

        win_lower {
            bindings = <
        &mo 9     &trans  &trans         &trans     &trans  &trans           &trans  &trans  &trans  &trans  &trans   &mo 9
&trans  &trans    &trans  &trans         &trans     &trans  &kp LC(LS(T))    &trans  &trans  &trans  &trans  &trans   &trans    &kp F12
        &kp LALT  &trans  &kp LC(LS(Z))  &kp LC(Z)  &trans  &trans           &trans  &trans  &trans  &trans  &trans   &kp RALT
        &kp LWIN  &kp F1  &kp F2         &kp F3     &kp F4  &kp F5           &kp F6  &kp F7  &kp F8  &kp F9  &kp F10  &kp F11
                          &trans         &trans     &trans  &trans           &trans  &trans  &trans  &trans
            >;
        };

        win_raise {
            bindings = <
        &mo 9      &trans  &trans            &trans        &trans             &trans                  &trans        &trans       &kp LS(LC(NUMBER_1))  &trans     &trans           &mo 9
&trans  &kp GRAVE  &none   &kp LEFT_BRACKET  &kp UP_ARROW  &kp RIGHT_BRACKET  &kp NON_US_BACKSLASH    &kp C_VOL_UP  &kp HOME     &kp UP                &kp END    &kp SLCK         &kp CAPS         &kp C_SLEEP
        &kp LALT   &trans  &kp LEFT          &kp DOWN      &kp RIGHT          &kp SEMICOLON           &kp C_MUTE    &kp LEFT     &kp DOWN              &kp RIGHT  &kp K_APP        &mt RALT INSERT
        &trans     &none   &none             &kp COMMA     &kp PERIOD         &kp SLASH               &kp C_VOL_DN  &kp PAGE_UP  &none                 &kp PG_DN  &kp PAUSE_BREAK  &trans
                           &trans            &trans        &trans             &trans                  &trans        &trans       &trans                &trans
            >;
        };

        mac_base {
            bindings = <
          &kp ESC    &kp N1  &kp N2        &kp N3     &kp N4                &kp N5       &kp N6     &kp N7          &kp N8     &kp N9         &kp N0    &kp MINUS
&kp CAPS  &kp GRAVE  &kp Q   &kp W         &kp E      &kp R                 &kp T        &kp Y      &kp U           &kp I      &kp O          &kp P     &kp LBKT       &kp RBKT
          &kp LALT   &kp A   &kp S         &kp D      &kp F                 &kp G        &kp H      &kp J           &kp K      &kp L          &kp SEMI  &mt RALT SQT
          &kp LCTRL  &kp Z   &kp X         &kp C      &kp V                 &kp B        &kp N      &kp M           &kp COMMA  &kp DOT        &kp FSLH  &kp KP_DIVIDE
                             &kp LEFT_WIN  &lt 8 TAB  &mt LEFT_SHIFT SPACE  &lt 7 RET    &lt 7 ESC  &mt RSHFT BSPC  &lt 8 DEL  &kp RIGHT_WIN
            >;
        };

        mac_lower {
            bindings = <
        &m_dash        &trans  &kp RA(NUMBER_2)  &kp RA(NUMBER_3)  &trans     &kp RA(H)        &kp RA(LS(LESS_THAN))  &kp RA(LS(GREATER_THAN))  &kp RA(LS(H))     &kp RA(PLUS)   &kp RA(EQUAL)  &kp RA(LS(MINUS))
&trans  &kp RA(GRAVE)  &trans  &kp RA(W)         &trans            &trans     &kp LS(LG(T))    &kp BACKSLASH          &kp RA(GRAVE)             &kp RA(NUMBER_6)  &kp RA(TILDE)  &trans         &trans             &kp F12
        &kp LALT       &trans  &kp LS(LG(Z))     &kp LG(Z)         &kp EQUAL  &kp PLUS         &kp RA(LS(BACKSLASH))  &kp RA(N9)                &kp RA(V)         &kp RA(N0)     &trans         &kp RALT
        &kp LCTRL      &kp F1  &kp F2            &kp F3            &kp F4     &kp F5           &kp F6                 &kp F7                    &kp F8            &kp F9         &kp F10        &kp F11
                               &trans            &lt 9 TAB         &trans     &trans           &trans                 &trans                    &lt 9 DEL         &trans
            >;
        };

        mac_raise {
            bindings = <
        &trans    &none         &kp LG(LEFT_BRACKET)  &kp LS(UP_ARROW)  &kp LG(RIGHT_BRACKET)  &kp LA(LS(V))    &none         &none        &kp LS(LG(NUMBER_1))  &none      &none            &none
&trans  &trans    &none         &kp LEFT_BRACKET      &kp UP_ARROW      &kp RIGHT_BRACKET      &kp LA(LS(H))    &kp C_VOL_UP  &kp HOME     &kp UP                &kp END    &kp SLCK         &kp CAPS         &kp C_SLEEP
        &kp LALT  &kp LS(LEFT)  &kp LEFT              &kp DOWN          &kp RIGHT              &kp LS(RIGHT)    &kp C_MUTE    &kp LEFT     &kp DOWN              &kp RIGHT  &kp K_APP        &mt RALT INSERT
        &trans    &none         &none                 &kp LS(DOWN)      &kp LS(N0)             &none            &kp C_VOL_DN  &kp PAGE_UP  &none                 &kp PG_DN  &kp PAUSE_BREAK  &trans
                                &trans                &trans            &trans                 &lt 9 RET        &lt 9 ESC     &trans       &trans                &trans
            >;
        };

        switch {
            bindings = <
       &trans      &none         &none         &sys_reset    &none         &bootloader     &bootloader   &none         &sys_reset    &none         &none         &trans
&none  &none       &none         &none         &none         &none         &none           &none         &none         &none         &none         &none         &none       &none
       &bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &bt BT_SEL 4  &bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0  &bt BT_CLR
       &none       &none         &none         &none         &mac          &win            &win          &mac          &none         &none         &none         &none
                                 &trans        &trans        &none         &none           &none         &none         &trans        &none
            >;
        };
    };
};
